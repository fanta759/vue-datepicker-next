import { HTMLAttributes } from 'vue';
import { usePrefixClass } from '../context';
import { keys, defineVueComponent } from '../vueUtil';

export interface ButtonIconProps extends HTMLAttributes {
  value: string;
}

function ButtonIcon({ value, ...rest }: ButtonIconProps) {
  const prefixClass = usePrefixClass();

  return () => {
    return (
      <button
        {...rest}
        type="button"
        class={`${prefixClass}-btn ${prefixClass}-btn-text ${prefixClass}-btn-icon-${value}`}
      >
        <i class={`${prefixClass}-icon-${value}`}></i>
      </button>
    );
  };
}

export const buttonIconProps = keys<ButtonIconProps>()([
  'about',
  'accesskey',
  'aria-activedescendant',
  'aria-atomic',
  'aria-autocomplete',
  'aria-busy',
  'aria-checked',
  'aria-colcount',
  'aria-colindex',
  'aria-colspan',
  'aria-controls',
  'aria-current',
  'aria-describedby',
  'aria-details',
  'aria-disabled',
  'aria-dropeffect',
  'aria-errormessage',
  'aria-expanded',
  'aria-flowto',
  'aria-grabbed',
  'aria-haspopup',
  'aria-hidden',
  'aria-invalid',
  'aria-keyshortcuts',
  'aria-label',
  'aria-labelledby',
  'aria-level',
  'aria-live',
  'aria-modal',
  'aria-multiline',
  'aria-multiselectable',
  'aria-orientation',
  'aria-owns',
  'aria-placeholder',
  'aria-posinset',
  'aria-pressed',
  'aria-readonly',
  'aria-relevant',
  'aria-required',
  'aria-roledescription',
  'aria-rowcount',
  'aria-rowindex',
  'aria-rowspan',
  'aria-selected',
  'aria-setsize',
  'aria-sort',
  'aria-valuemax',
  'aria-valuemin',
  'aria-valuenow',
  'aria-valuetext',
  'autocapitalize',
  'autocave',
  'autocorrect',
  'class',
  'color',
  'contenteditable',
  'contextmenu',
  'datatype',
  'dir',
  'draggable',
  'hidden',
  'id',
  'inlist',
  'innerHTML',
  'inputmode',
  'is',
  'itemid',
  'itemprop',
  'itemref',
  'itemscope',
  'itemtype',
  'lang',
  'onAbort',
  'onAnimationend',
  'onAnimationiteration',
  'onAnimationstart',
  'onAuxclick',
  'onBeforeinput',
  'onBlur',
  'onCanplay',
  'onCanplaythrough',
  'onChange',
  'onClick',
  'onCompositionend',
  'onCompositionstart',
  'onCompositionupdate',
  'onContextmenu',
  'onCopy',
  'onCut',
  'onDblclick',
  'onDrag',
  'onDragend',
  'onDragenter',
  'onDragexit',
  'onDragleave',
  'onDragover',
  'onDragstart',
  'onDrop',
  'onDurationchange',
  'onEmptied',
  'onEncrypted',
  'onEnded',
  'onError',
  'onFocus',
  'onFocusin',
  'onFocusout',
  'onInput',
  'onInvalid',
  'onKeydown',
  'onKeypress',
  'onKeyup',
  'onLoad',
  'onLoadeddata',
  'onLoadedmetadata',
  'onLoadstart',
  'onMousedown',
  'onMouseenter',
  'onMouseleave',
  'onMousemove',
  'onMouseout',
  'onMouseover',
  'onMouseup',
  'onPaste',
  'onPause',
  'onPlay',
  'onPlaying',
  'onPointercancel',
  'onPointerdown',
  'onPointerenter',
  'onPointerleave',
  'onPointermove',
  'onPointerout',
  'onPointerover',
  'onPointerup',
  'onProgress',
  'onRatechange',
  'onReset',
  'onScroll',
  'onSeeked',
  'onSeeking',
  'onSelect',
  'onStalled',
  'onSubmit',
  'onSuspend',
  'onTimeupdate',
  'onTouchcancel',
  'onTouchend',
  'onTouchmove',
  'onTouchstart',
  'onTransitionend',
  'onTransitionstart',
  'onVolumechange',
  'onWaiting',
  'onWheel',
  'placeholder',
  'prefix',
  'property',
  'radiogroup',
  'resource',
  'results',
  'role',
  'security',
  'spellcheck',
  'style',
  'tabindex',
  'title',
  'translate',
  'typeof',
  'unselectable',
  'vocab',
  'value',
]);

export default defineVueComponent(ButtonIcon, buttonIconProps);
